{"version":3,"sources":["actions/data.ts","consts.ts","components/DirUpButton.tsx","components/DirPage.tsx","components/CharacterPage.tsx","routes/FilePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["path","setData","a","axios","get","responseType","resp","console","log","data","style","position","left","top","DirUpButton","parent","history","useHistory","Fab","color","onClick","push","buttonStyle","width","marginLeft","marginRight","DirPage","relPath","hist","Container","Typography","children","map","c","Button","key","url","variant","ListItemText","primary","title","galleryImageStyle","maxHeight","objectFit","CharacterPage","files","images","name","cv","GridList","cellHeight","window","innerHeight","GridListTile","src","alt","GridListTileBar","Grid","container","item","controls","FilePage","withRouter","params","match","useState","useEffect","loadNodeData","split","slice","join","Skeleton","height","type","App","className","component","exact","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ea164f8.chunk.js","sourcesContent":["import axios from 'axios'\nimport {XData} from '../../../types/data'\nimport {DATA_ROOT_URL} from '../consts'\n\nexport async function loadNodeData(path: string, setData: (data: XData) => void) {\n    const resp = await axios.get(`${DATA_ROOT_URL}/${path}/index.json`, {responseType: 'text'})\n    console.log(await axios.get(`${DATA_ROOT_URL}/${path}/index.json`))\n    setData(resp.data)\n}\n","export const DATA_ROOT_URL = 'data'","import { useHistory } from \"react-router-dom\"\n\nimport Fab from '@material-ui/core/Fab';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport React from \"react\";\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\n\ninterface Props {\n    parent: string | null\n}\n\nconst style: CSSProperties = {\n    position: 'fixed',\n    left: '1rem',\n    top: '1rem'\n}\n\nexport function DirUpButton({parent}: Props) {\n    const history = useHistory()\n    if(parent === null) return null\n    return <Fab color=\"primary\" style={style} onClick={() => history.push(`/data/${parent}`)}>\n        <ArrowUpward/>\n    </Fab>\n}","import {XDirData} from '../../../types/data'\nimport React, { CSSProperties } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport ListItemText from '@material-ui/core/ListItemText'\nimport { DirUpButton } from './DirUpButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\ninterface Props {\n    data: XDirData\n    relPath: string\n    parent: string | null\n}\n\nconst buttonStyle: CSSProperties = {\n    width: \"80%\", \n    marginLeft: \"10%\",\n    marginRight: \"10%\"\n}\n\nexport function DirPage({data, parent, relPath}: Props){\n    const hist = useHistory()\n    return <div>\n        <DirUpButton parent={parent}/>\n        <Container>\n        <Typography>{relPath}</Typography>\n        {data.children.map(c => (\n            <Button key={c.url} onClick={() => hist.push(`/data/${c.url}`)} color=\"primary\" variant=\"contained\" style={buttonStyle}>\n                <ListItemText primary={c.title} />\n            </Button>\n        ))}\n        </Container>\n    </div>\n}","\nimport {XCharacterData, FileIndexInfo} from '../../../types/data'\nimport React from 'react'\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\nimport { DirUpButton } from './DirUpButton';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst galleryImageStyle: CSSProperties = {\n    maxHeight: '100%',\n    objectFit: 'contain'\n}\n\nfunction renderGallery(images: FileIndexInfo[]){\n    console.log(images)\n    return <GridList cellHeight={window.innerHeight / 2}>\n        {images.map(({title, url}) => (\n            <GridListTile key={url}>\n                <img src={url} alt={title} style={galleryImageStyle}/>\n                <GridListTileBar title={title}/>\n            </GridListTile>\n        ))}\n    </GridList>\n}\n\nfunction renderAudios(files: FileIndexInfo[]){\n    return <Grid container>\n        {files.map(({title, url}) => (\n            <Grid item key={url}>\n                <audio src={url} controls/>\n            </Grid>\n        ))}\n    </Grid>\n}\n\ninterface Props {\n    data: XCharacterData\n    parent: string | null\n}\n\n\nexport function CharacterPage({data, parent}: Props){\n    return <div>\n        <DirUpButton parent={parent}/>\n        <h1>{data.name}</h1>\n        <h3>{data.cv}</h3>\n        {renderGallery(data.images)}\n        {renderAudios(data.files)}\n    </div>\n}","import React, { useState, useEffect } from 'react'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { XData } from '../../../types/data'\nimport { loadNodeData } from '../actions/data'\nimport { DirPage } from '../components/DirPage'\nimport { CharacterPage } from '../components/CharacterPage'\nimport Skeleton from '@material-ui/lab/Skeleton'\n\ninterface Params {\n    path?: string\n}\n\n\nexport const FilePage = withRouter((params: RouteComponentProps<Params>) => {\n    const path = params.match.params.path || \"\"\n    const [data, setData] = useState<XData|null>(null)\n    useEffect(() => {\n        loadNodeData(path, setData)\n    }, [path])\n    const parent = path ? path.split(\"/\").slice(0, -1).join(\"/\") : null\n    if(data == null){\n        return <Skeleton variant=\"rect\" width={210} height={118} />\n    }else if (data.type === 'character'){\n        return <CharacterPage data={data} parent={parent}/>\n    }else {\n        return <DirPage data={data} parent={parent} relPath={path}/>\n    }\n})\n","import React from 'react';\nimport './App.css';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"\nimport { FilePage } from './routes/FilePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/data/:path(.*)\" component={FilePage}/>\n          <Route path=\"/data\" exact component={FilePage}/>\n          <Route path=\"/\" exact component={FilePage}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}